// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Tabels.Detail", b =>
                {
                    b.Property<int>("PumpDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PumpDetailId"));

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PumpDetailId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("Shared.Models.Tabels.File", b =>
                {
                    b.Property<long>("FilesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FilesId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("SourceTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("FilesId");

                    b.HasIndex("SourceTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Shared.Models.Tabels.FileToTable", b =>
                {
                    b.Property<long>("FilesToTablesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FilesToTablesId"));

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Table")
                        .HasColumnType("smallint");

                    b.HasKey("FilesToTablesId");

                    b.ToTable("FilesToTables");
                });

            modelBuilder.Entity("Shared.Models.Tabels.FileType", b =>
                {
                    b.Property<byte>("FileTypesId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FileTypesId");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Material", b =>
                {
                    b.Property<long>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MaterialId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Motor", b =>
                {
                    b.Property<int>("MotorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MotorsId"));

                    b.Property<float>("Current")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Power")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.HasKey("MotorsId");

                    b.ToTable("Motors");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Pump", b =>
                {
                    b.Property<long>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PumpId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("ImpellerMaterialId")
                        .HasColumnType("bigint");

                    b.Property<float>("LiquidTemperature")
                        .HasColumnType("real");

                    b.Property<long>("MaterialHousingId")
                        .HasColumnType("bigint");

                    b.Property<float>("MaxPressure")
                        .HasColumnType("real");

                    b.Property<int>("MotorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long?>("PumpPhotos")
                        .HasColumnType("bigint");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("PumpId");

                    b.HasIndex("MotorId");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("Shared.Models.Tabels.PumpDetail", b =>
                {
                    b.Property<long>("PumpDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PumpDetailId"));

                    b.Property<int>("DetailId")
                        .HasColumnType("integer");

                    b.Property<long>("PumpId")
                        .HasColumnType("bigint");

                    b.HasKey("PumpDetailId");

                    b.HasIndex("DetailId");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpsDetails");
                });

            modelBuilder.Entity("Shared.Models.Tabels.SourceType", b =>
                {
                    b.Property<byte>("SourcesId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SourcesId");

                    b.ToTable("SourceTypes");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Detail", b =>
                {
                    b.HasOne("Shared.Models.Tabels.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Shared.Models.Tabels.File", b =>
                {
                    b.HasOne("Shared.Models.Tabels.SourceType", "SourceType")
                        .WithMany("Files")
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Tabels.FileType", "FileType")
                        .WithMany("File")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Pump", b =>
                {
                    b.HasOne("Shared.Models.Tabels.Motor", "Motors")
                        .WithMany("Pumps")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motors");
                });

            modelBuilder.Entity("Shared.Models.Tabels.PumpDetail", b =>
                {
                    b.HasOne("Shared.Models.Tabels.Detail", "Detail")
                        .WithMany("PumpDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Tabels.Pump", "Pump")
                        .WithMany("PumpDetails")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Detail", b =>
                {
                    b.Navigation("PumpDetails");
                });

            modelBuilder.Entity("Shared.Models.Tabels.FileType", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Motor", b =>
                {
                    b.Navigation("Pumps");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Pump", b =>
                {
                    b.Navigation("PumpDetails");
                });

            modelBuilder.Entity("Shared.Models.Tabels.SourceType", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}

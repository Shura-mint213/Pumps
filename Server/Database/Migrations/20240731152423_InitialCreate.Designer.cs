// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(PumpsContext))]
    [Migration("20240731152423_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Tabels.Detail", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DetailId");

                    b.ToTable("Details");

                    b.HasData(
                        new
                        {
                            DetailId = 1,
                            Name = "Приводной вал"
                        },
                        new
                        {
                            DetailId = 2,
                            Name = "Сальник вала"
                        },
                        new
                        {
                            DetailId = 3,
                            Name = "Лопастное колесо"
                        },
                        new
                        {
                            DetailId = 4,
                            Name = "Корпус насоса"
                        },
                        new
                        {
                            DetailId = 5,
                            Name = "Подшипник"
                        },
                        new
                        {
                            DetailId = 6,
                            Name = "Опорный вал"
                        },
                        new
                        {
                            DetailId = 7,
                            Name = "Рабочее колесо"
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.File", b =>
                {
                    b.Property<long>("FilesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FilesId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ExtensionId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("SourceTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("FilesId");

                    b.HasIndex("ExtensionId");

                    b.HasIndex("SourceTypeId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            FilesId = 1L,
                            Created = new DateTime(2024, 7, 31, 18, 24, 22, 769, DateTimeKind.Local).AddTicks(7979),
                            ExtensionId = (byte)1,
                            Name = "5422_big",
                            OriginalName = "5422_big.jpg",
                            Path = "\\Pumps",
                            SourceTypeId = (byte)1
                        },
                        new
                        {
                            FilesId = 2L,
                            Created = new DateTime(2024, 7, 31, 18, 24, 22, 769, DateTimeKind.Local).AddTicks(7996),
                            ExtensionId = (byte)1,
                            Name = "poverxnostnyij-nasos-pn-900che-vixr",
                            OriginalName = "poverxnostnyij-nasos-pn-900che-vixr.jpg",
                            Path = "\\Pumps",
                            SourceTypeId = (byte)1
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.FileExtension", b =>
                {
                    b.Property<byte>("FileExtensionId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FileExtensionId");

                    b.ToTable("FileExtensions");

                    b.HasData(
                        new
                        {
                            FileExtensionId = (byte)1,
                            Name = "jpg"
                        },
                        new
                        {
                            FileExtensionId = (byte)2,
                            Name = "png"
                        },
                        new
                        {
                            FileExtensionId = (byte)3,
                            Name = "zip"
                        },
                        new
                        {
                            FileExtensionId = (byte)4,
                            Name = "jpeg"
                        },
                        new
                        {
                            FileExtensionId = (byte)5,
                            Name = "pdf"
                        },
                        new
                        {
                            FileExtensionId = (byte)6,
                            Name = "rar"
                        },
                        new
                        {
                            FileExtensionId = (byte)7,
                            Name = "7z"
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.Material", b =>
                {
                    b.Property<long>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MaterialId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialId = 1L,
                            Description = "Сталь (от нем. Stahl)[1] — сплав железа с углеродом (и другими элементами периодической таблицы), содержащий не менее 45 % железа и в котором содержание углерода находится в диапазоне от 0,02 до 2,14 %, причём содержанию от 0,6 % до 2,14 % соответствует высокоуглеродистая сталь.",
                            Name = "Сталь"
                        },
                        new
                        {
                            MaterialId = 2L,
                            Description = "Чугу́н — сплав железа с углеродом (и другими элементами), в котором содержание углерода — не менее 2,14 % (точка предельной растворимости углерода в аустените на диаграмме состояний), а сплавы с содержанием углерода менее 2,14 % называются сталью. Углерод придаёт сплавам железа твёрдость, снижая пластичность и вязкость.",
                            Name = "Чугун"
                        },
                        new
                        {
                            MaterialId = 3L,
                            Description = "Нержавеющая сталь (коррозионно-стойкие стали, в просторечье «нержавейка») — легированная сталь, устойчивая к коррозии в атмосфере и агрессивных средах, обладающая термостойкими свойствами[1][2]. Различные марки нержавеющей стали включают хром, никель, углерод, азот, алюминий, кремний, серу, титан, медь, селен, ниобий и молибден[3]. Однако, в условиях, например, солевого тумана и морской воды, а также при нарушении технологии сварки и термической обработки, и нержавеющая сталь подвергается коррозии.",
                            Name = "Нержавеющая сталь"
                        },
                        new
                        {
                            MaterialId = 4L,
                            Description = "Бро́нза — сплав меди, обычно с оловом в качестве основного компонента, но к бронзам также относят медные сплавы с алюминием, кремнием, бериллием, свинцом и другими элементами, за исключением цинка (это латунь), никеля (это мельхиор), цинка и никеля (это нейзильбер). Как правило, в любой бронзе в незначительных количествах присутствуют добавки: цинк, свинец, фосфор и другие.",
                            Name = "Бронза"
                        },
                        new
                        {
                            MaterialId = 5L,
                            Description = "Кера́мика (др.-греч. κέραμος — глина) — материалы, изготавливаемые из глин или их смесей с минеральными добавками (а иногда из других неорганических соединений) под воздействием высокой температуры с последующим охлаждением; а также изделия из таких материалов[.",
                            Name = "Керамики"
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.Pump", b =>
                {
                    b.Property<long>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PumpId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaxLiquidTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MaxPressure")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("PumpId");

                    b.ToTable("Pumps");

                    b.HasData(
                        new
                        {
                            PumpId = 1L,
                            Description = "Поверхностный насос предназначен для подачи под давлением чистой воды в дом, для орошения сада и огорода.\r\n\r\nВода не должна содержать абразивных или волокнистых, а также химических составных частей, которые могли бы повредить материал деталей насоса.",
                            MaxLiquidTemperature = 50f,
                            MaxPressure = 45f,
                            Name = "Поверхностный насос ПН-900 Вихрь",
                            Price = 11980m,
                            Weight = 25f
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.PumpDetail", b =>
                {
                    b.Property<long>("PumpDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PumpDetailId"));

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<long>("PumpId")
                        .HasColumnType("bigint");

                    b.HasKey("PumpDetailId");

                    b.HasIndex("DetailId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpsDetails");

                    b.HasData(
                        new
                        {
                            PumpDetailId = 1L,
                            DetailId = 1,
                            MaterialId = 1L,
                            PumpId = 1L
                        },
                        new
                        {
                            PumpDetailId = 2L,
                            DetailId = 2,
                            MaterialId = 1L,
                            PumpId = 1L
                        },
                        new
                        {
                            PumpDetailId = 3L,
                            DetailId = 3,
                            MaterialId = 2L,
                            PumpId = 1L
                        },
                        new
                        {
                            PumpDetailId = 4L,
                            DetailId = 4,
                            MaterialId = 3L,
                            PumpId = 1L
                        },
                        new
                        {
                            PumpDetailId = 5L,
                            DetailId = 5,
                            MaterialId = 4L,
                            PumpId = 1L
                        },
                        new
                        {
                            PumpDetailId = 6L,
                            DetailId = 6,
                            MaterialId = 1L,
                            PumpId = 1L
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.PumpFile", b =>
                {
                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("PumpId")
                        .HasColumnType("bigint");

                    b.HasKey("FileId", "PumpId");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpFiles");

                    b.HasData(
                        new
                        {
                            FileId = 1L,
                            PumpId = 1L
                        },
                        new
                        {
                            FileId = 2L,
                            PumpId = 1L
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.SourceType", b =>
                {
                    b.Property<byte>("SourcesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SourcesId");

                    b.ToTable("SourceTypes");

                    b.HasData(
                        new
                        {
                            SourcesId = (byte)1,
                            Description = "Файлы хронятся на сервере",
                            Name = "Файл на сервере"
                        },
                        new
                        {
                            SourcesId = (byte)2,
                            Description = "Файлы хронятся на в яндекс облаке",
                            Name = "Файл на Яндекс облаке"
                        },
                        new
                        {
                            SourcesId = (byte)3,
                            Name = "Файл в Google облаке"
                        });
                });

            modelBuilder.Entity("Shared.Models.Tabels.File", b =>
                {
                    b.HasOne("Shared.Models.Tabels.FileExtension", "FileExtension")
                        .WithMany("File")
                        .HasForeignKey("ExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Tabels.SourceType", "SourceType")
                        .WithMany("Files")
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileExtension");

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("Shared.Models.Tabels.PumpDetail", b =>
                {
                    b.HasOne("Shared.Models.Tabels.Detail", "Detail")
                        .WithMany("PumpDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Tabels.Material", "Material")
                        .WithMany("PumpDetails")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Tabels.Pump", "Pump")
                        .WithMany("PumpDetails")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Material");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("Shared.Models.Tabels.PumpFile", b =>
                {
                    b.HasOne("Shared.Models.Tabels.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Tabels.Pump", "Pump")
                        .WithMany("PumpFiles")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Detail", b =>
                {
                    b.Navigation("PumpDetails");
                });

            modelBuilder.Entity("Shared.Models.Tabels.FileExtension", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Material", b =>
                {
                    b.Navigation("PumpDetails");
                });

            modelBuilder.Entity("Shared.Models.Tabels.Pump", b =>
                {
                    b.Navigation("PumpDetails");

                    b.Navigation("PumpFiles");
                });

            modelBuilder.Entity("Shared.Models.Tabels.SourceType", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
